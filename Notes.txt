class is a template definition of the methods and variables in a particular kind of object.

The functions defined in a class are called methods and outside they are called functions

The self is used in method functions as python sends the 'object' itself as the first argument hence self is used to avoid any
confusion, Instance name this is Item is passed as first argument mapping to the self keyword, here object as the first argument
means the reference address of the object is sent as self, python is pass by reference.

The instance created is called an object/instance, when an instance is created it gains access to the methods defined in the class

For any instance you can define attributes like name, quantity etc.

Whenever an instance is called, to avoid having to define attributes every time we use a constructor to pass the attributed in the
class dynamically by using a __init__ method

When we create an instance say item = Item(), the code first runs a __init__ method also called as constructor, by using this method
in class, one can define all necessary attributes for an instance dynamically, to minimize the repeatatiive declaration of attributes
in instances
def __init__(self(Instance name), name, price,quantity):
    self.name(Variable)= name(Argument)
    self.price = price
    self.quantity = quantity
In the above code self will substitute to the instance/object name
You can also declare attributes to both methods and instances

When you are declaring other methods in the class, you need not declare parameters as you have already declared in the constructor
function

There are attributes called class attributes, which are defined outside all instances and they can
be accessed in class and instance level only not in method  level of class, you can overwrite a
class attribute

Use __repr__ method to output instances in the console as however you want

Class Method : initialised using @classmethod. and the first argument sent is the class itself as cls that is the class reference
address as the first parameter
The code and the data should not be in the same place so create a new file, and to import the file values in use a 'class method'
Class method are methods which are used to import instances, since an instance cannot import another intsance, class method is used
as it has higher access

Static method : Initialised using @static method, here we are not sending the instance as a first argument unlike previous cases.
only regular parameters are sent, hence we should relate to the static method like the isolated function we see regularly

NEVER CALL A CLASS OR STATIC METHOD FROM AN INSTANCE, ALWAYS CALL IT FROM A CLASS

The difference between static and Class method:

1.Static method should be used when we want to do something that is not unique with an instance but should still have a relationship
to the class, because if there is no relationship with the class then it might as well be an isolated function, like in our example
it has nothing to do with any instance, but it still has a relation with the class as it takes the price value to check if integer.

2. Class method : It is for instantiating instances meaning only if you are creating instances from data in an external location
then it is best to use class method like in our project, these are used to manipulate different structures of data.

The main difference, static methods are not passing the object reference as the first argument in the background, but in class method
the first argument received is a mandatory parameter so the class reference is passed in the background to cls.

INHERITANCE: When we need to work on a small subset of parent class, we can inherit all methods,attributes of parent class to a
child class and have some methods of its own
1. We need to add same constructor from parent class along with additional variables
2. Use a super function to access all attributes/methods
3. Add only extra stuff and run

For large amounts of instances it is better to use multiple files
1. main = Dedicated for only creating instances
2. One contains the Parent class definitions
3. One more file with child class definitions

Getters and Setter: Encapsulation, i.e. restricting access to some operations like overwrite a name for an attribute in an instance
Getter are properties which use decorators to get the file name with only read access, here the attribute can't be overwritten
for the attribute you want to make it into read access you just create a function inside the decorator with the attribute name,
and you introduce __name in place of 'name', so that it will become a 'PRIVATE ATTRIBUTE' and will not be called from instance level
so when Item.name is called, name will be the name of the function which return the attribute name on read only permission
Using a decorator u can make an attribute read only and similarly another function with the same name inside a setter property
will overwrite read only permissions.
_name can be used to make it work, but _name is accessible through instance level
__name will turn the attribute private
If you want to make an attribute a private or any other kind of attribute the pass the attribute as function inside properties
in this way you can convert then to private attributes.

OOPS has 4 key principles :

1. Encapsulation :A mechanism of restricting direct write access to some of our attributes in a program,it dont allow access directly
to the attribute but you can manipulate the attribute value with function like applying discount, for example the price attribute
Attribute security : Instance should not be able to access write for an attribute

2. Abstraction : The principle which says to hide unnecessary info to the user, say for example we need to send an email to someone
there are multiple methods involved in the class, an instance will have access to those intermediate methods too, that is not good
so we need to make those intermediate functions private by adding __, only the final functions should be acccessible to the instance
in between methods should be accessible only inside the class and not at the instance level, so make those methods private
Method security : Instance should not have access to intermediate methods

3. Inheritance : A mechanism that allows us to reuse the code across different classes

4. Polymorphism : It referes to use of a single entity in different scenarios, for example len() function in python works for all
kinds of data list, string etc, similarly when we inherit parent class to child class and then use parent class methods in child
class, that is polymorphism, also we can use the parent class attributes with a different value in each child class and when they are
called from the instance the parent class attribute value will be overridden by child class attribute value, so polymorphism means
to use a single entity multiple times wherever we want with different properties and values, you can use same parent class methods
with different logic and that will be considered while running instead of parent class method

The parts of the process are classes and actions performed are the methods